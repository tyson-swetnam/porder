{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"porder: Simple CLI for Planet ordersV2 API \u00b6 Please note: This is in no way an official tool, or Planet offering. Created by Samapriya Roy. Owned and maintained by Tyson Swetnam Ordersv2 is the next iteration of Planet's API in getting Analysis Ready Data (ARD) delivered to you. Orders v2 allows you to improved functionality in this domain, including capability to submit an number of images in a batch order, and perform operations such as top of atmospheric reflectance, compression, coregistration and also enhanced notifications such as email and webhooks. Based on your access you can use this tool to chain together a sequence of operations. This tool is a command line interface that allows you to interact with the ordersv2 API along with place orders and download orders as needed. The tool also allows you to chain multiple processes together and additional functionalities will be added as needed. For exporting to cloud storages release 0.0.8 onwards has a configuration folder with config yml structures to be used with this tool. Simply replaces the fields as needed. If you use this tool to download data for your research, and find this tool useful, star and cite it as below Samapriya Roy, Tyson L. Swetnam, Isabella (Izzi) Hinks, Ryan Avery, David Shean, Anthony Lukach, & Scott Henderson. (2021, July 7). tyson-swetnam/porder: porder: Simple CLI for Planet ordersV2 API (Version 0.8.3). Zenodo. http://doi.org/10.5281/zenodo.5079783","title":"Introduction"},{"location":"#porder-simple-cli-for-planet-ordersv2-api","text":"Please note: This is in no way an official tool, or Planet offering. Created by Samapriya Roy. Owned and maintained by Tyson Swetnam Ordersv2 is the next iteration of Planet's API in getting Analysis Ready Data (ARD) delivered to you. Orders v2 allows you to improved functionality in this domain, including capability to submit an number of images in a batch order, and perform operations such as top of atmospheric reflectance, compression, coregistration and also enhanced notifications such as email and webhooks. Based on your access you can use this tool to chain together a sequence of operations. This tool is a command line interface that allows you to interact with the ordersv2 API along with place orders and download orders as needed. The tool also allows you to chain multiple processes together and additional functionalities will be added as needed. For exporting to cloud storages release 0.0.8 onwards has a configuration folder with config yml structures to be used with this tool. Simply replaces the fields as needed. If you use this tool to download data for your research, and find this tool useful, star and cite it as below Samapriya Roy, Tyson L. Swetnam, Isabella (Izzi) Hinks, Ryan Avery, David Shean, Anthony Lukach, & Scott Henderson. (2021, July 7). tyson-swetnam/porder: porder: Simple CLI for Planet ordersV2 API (Version 0.8.3). Zenodo. http://doi.org/10.5281/zenodo.5079783","title":"porder: Simple CLI for Planet ordersV2 API &nbsp;"},{"location":"changelog/","text":"Changelog \u00b6 v0.8.5 \u00b6 Fixed minor issue with import error checking for GDAL v0.8.4 \u00b6 Resolved Issue 49 Download now contains manifest.json for cross checking delivery v0.8.3 \u00b6 Fixed bundle parsing Updated based bundles v0.8.2 \u00b6 Pull request 48 fixes typos and equations for bandmath and includes additional reference information increased pipwin check time to 60+ days added better version check and handling updated license date and minor fixes v0.8.1 \u00b6 Search function can now parse date and time. Enhancement from Issue 47 Updated readme site to include search examples Stability test across python3.7 to 3.9 and for all os types pipwin checks cache every one month v0.8.0 \u00b6 Added gee-integration example Updated readme site to include examples v0.7.9 \u00b6 Added gee-integration tool to order General improvements v0.7.8 \u00b6 Added support for multipolygon search and clip. Added coregistration and format tools to order Removed persistent version print Overall cleanup and general Improvements v0.7.7 \u00b6 Removed dependency on pendulum and general cleanup. v0.7.6 \u00b6 Now use multiple assets with the idlist tool pass assets as analytic_sr,udm2 for example to get items with both these assets. Updated readme. v0.7.5 \u00b6 Fixed pipwin python path for installer. idlist tool now only returns standard and excludes beta and test quality. v0.7.4 \u00b6 added smart check on partially completed order for reordering. completed orders can be reordered as well v0.7.3 \u00b6 Now constantly checks for updated version incase your porder version is not updated. Added a reorder tool for users to reorder an exiting order or failed order. v0.7.1 \u00b6 ID check tool now works with/without geometry, pass an idlist, and item and asset type to check. Order size tool is optimized for speed. pipwin tool uploaded to v0.5.0 to handle windows packages. Overall general improvements. v0.7.0 \u00b6 Now estimates total download size before downloading. Fixed issue with downloading single archive zip files. v0.6.9 \u00b6 Updated readme to do bulk conversion from Shapefile and KML to geojson. Fixed issues with bundles read and update. v0.6.8 \u00b6 Fixed issues with direct usage of kml to get idlist. Combined convert tool to convert folders with shapefiles and kml to geojsons. v0.6.6-v0.6.7 \u00b6 Fixed downloader for pipwin for release >= 0.4.8 Improved overall package installation for windows Check pipwin import version to get release 0.4.9 v0.6.5 \u00b6 Added bundles check function to get latest bundles from developers page . v0.6.4 \u00b6 Pull request fixed issue with pipwin installation. v0.6.2 \u00b6 Fixed issue with werkzeug and pipwin implementation. Changed default overlap to 0.01 Fixed issue with YAML loader implementation. General improvements. v0.6.1 \u00b6 Added cancel order and bulk cancel orders tools v0.6.0 \u00b6 Fixed base64 encoding for GCS credentials for python 3. Re-release of python 3 only supported version. Use upto version 0.5.7 only for Python 2. v0.5.9 \u00b6 No more deperecation or future warnings from pyproj Issue 40 porder search is faster Python 2.7 will reach the end of its life on January 1 st , 2020. No more python 2 support from v0.5.9 v0.5.8 \u00b6 Handles python version while installing pipwin Now open readme page in browser using porder readme v0.5.7 \u00b6 Fixed arg readout if no argument is passed to CLI. Issue 39 . Updated requirements to include DateTimeRange Fixed issue with GDAL~=3 requirement for fiona 1.8.11 release v0.5.6 \u00b6 Merged pull request 38 to allow for nested delivery of zip files to cloud storage. Added an order state list tool. v0.5.5 \u00b6 Better file check for skipping download requests. Improvements to multiprocessing and async downloader. General improvements to stability and performance. v0.5.4 \u00b6 Updated bundles.json. Merged pull request to update bundles . v0.5.3 \u00b6 Updated order status. Check existing files before attempting redirect url and download. Overall optimization for faster check and updated readme for fallback bundles. v0.5.2 \u00b6 Added harmonization tool to harmonize PS2.SD to PS2. Improvements and error handling to quota tool Merged pull request 35 to keep download progress via enumerate. v0.5.1 \u00b6 Added utf-8 encoding for shapefile to geojson conversion Merged pull request 34 to refresh url once expired. v0.4.9 \u00b6 Fixed issue with gdal import for pipwin windows. Fixed import issue with stats endpoint. v0.4.8 \u00b6 Replaced concurrency check with stats endpoint to get queued and running orders. Change pipwin cache refresh time to two weeks. v0.4.7 \u00b6 Fixed issue with queuing state for orders and downloads. v0.4.6 \u00b6 Handles refreshing pipwin cache and better error handling Fixed issue with downloading unique manifest ID for zip files. Updated ReadMe with improved documentation. v0.4.5 \u00b6 Handles installation of windows specific libraries using pipwin . General improvements v0.4.4 \u00b6 Manifest files for each asset is now written in format ItemID_manifest.json to avoid skipping manifest.json common file name. Simple and multipart downloader now show number of items remaining during the download. General improvements, bundles tool now prints Bundles:Name followed by assets included in the bundle v0.4.3 \u00b6 Fixed issues with setup.py and pyproj version. Improved ReadMe instructions. v0.4.2 \u00b6 Added geometry check functionality to multipolygon with shapely self intersection Issue 30 . For multipolygons this also performs a vertex count check and simplifies polygon to fit under 500 vertices. General improvements v0.4.1 \u00b6 Fixed issue with shapely self intersection using buffer(0). General improvements v0.4.0 \u00b6 Fixed issue with placing reprojection request. Downloader can now download partial as well as completely successful orders. Added retry method for rate limit during downloading General improvements v0.3.9 \u00b6 Removed deprecated bundles from bundles list. Improved parameter description v0.3.7 \u00b6 Added capability to pass subscription id when submitting order. v0.3.6 \u00b6 Replaced asset in order tool with bundles. Created a new bundles tool to generate bundle list for an item type Improvements to the idlist tool now prints output as it makes progress. v0.3.5 \u00b6 Better integration for quota tool Updates information while waiting for idlist Updated requirements v0.3.4 \u00b6 Added async downloader for python 3.4 Checks for existing files before spawning processes Better handling of multiprocessing output Added a quick version tool v0.3.3 \u00b6 Fixed issue with order name when no ops are used. Used file basename for splitting the idlist. v0.3.2 \u00b6 idlist tool can no use a multipolygon and iteratively look for scenes Orders clip tool can now handle multipolygon clip Added new tool zipall to handle single archive download in format ordername_date.zip v0.3.1 \u00b6 Can now support an additional string and range filter Check total area and clip area estimates from any idlist using idcheck. General improvements to the tool. v0.3.0 \u00b6 Enhances idlist to execute faster search and return using Planet CLI Included better error handling while placing order. v0.2.8 \u00b6 Added tool to convert folder with shapefiles to GeoJSONs v0.2.7 \u00b6 Improved overlap calculations for larger geometries Added a geometry simplification tool to reduce number of vertices v0.2.6 \u00b6 Skysat area are calculated using EPSG:3857 to resolve metadata EPSG issue General improvements v0.2.5 \u00b6 Fixed issue with area calculation estimates General improvements v0.2.4 \u00b6 Now functions without limit on the number of assets in the idlist Parses possible asset types if only item type is supplied for idlist v0.2.3 \u00b6 Now estimates area before and after clip when you run idlist General improvements v0.2.1 \u00b6 Now exports only csv idlist Fixed count with concurrency check v0.2.0 \u00b6 Fixed pysmartdl install issues Added concurrent orders check version and os resolve for shapely v0.1.9 \u00b6 Added msavi Fixed issues with GeoJSON read v0.1.8 \u00b6 Fixed issues with empty JSON append General improvements to the tool v0.1.7 \u00b6 Added band math indices for PlanetScope item Fixed issues with retry for downloader General improvements to the tool v0.1.6 \u00b6 Made fixes to have python 3.X compatability v0.1.5 \u00b6 General improvements and bug fixes v0.1.4 \u00b6 Fixed issue with Python 3 CSV write compatability Fixed issues with Shapely instance issue v0.1.3 \u00b6 Fixed issue with clipboard access in headless setup v0.1.2 \u00b6 Fixed issue and extension for multiprocessing downloader Overall general improvements to the tool v0.1.0 \u00b6 Fixed issue and improved idlist and sort Fixed issue with clip tool Overall general improvements to the tool v0.0.8 \u00b6 Improvements to operations in order tool Now supports export to gcs/azure/aws along with kernel, projection and compression base64 encoding tool for encoding gcs credentials Overall general improvements to the tool v0.0.7 \u00b6 Now allows for all downloads or download using extension Polling for order to complete and automatically download General improvements v0.0.6 \u00b6 Merged contribution by David Shean Fixed issues with op equals None Fixed issues with relative import Improved Py3 compatability General improvements v0.0.5 \u00b6 Added exponential backoff for pydl Fixed issues with dependency General overall improvements v0.0.4 \u00b6 Created strict geoinstersection to avoid orders to fail Improvements to overlap function General overall improvements v0.0.3 \u00b6 Added overlap function to idlist Added multiprocessing downloader with rate limit and extension filter General overall improvements v0.0.2 \u00b6 Fixed issues with import modules","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v085","text":"Fixed minor issue with import error checking for GDAL","title":"v0.8.5"},{"location":"changelog/#v084","text":"Resolved Issue 49 Download now contains manifest.json for cross checking delivery","title":"v0.8.4"},{"location":"changelog/#v083","text":"Fixed bundle parsing Updated based bundles","title":"v0.8.3"},{"location":"changelog/#v082","text":"Pull request 48 fixes typos and equations for bandmath and includes additional reference information increased pipwin check time to 60+ days added better version check and handling updated license date and minor fixes","title":"v0.8.2"},{"location":"changelog/#v081","text":"Search function can now parse date and time. Enhancement from Issue 47 Updated readme site to include search examples Stability test across python3.7 to 3.9 and for all os types pipwin checks cache every one month","title":"v0.8.1"},{"location":"changelog/#v080","text":"Added gee-integration example Updated readme site to include examples","title":"v0.8.0"},{"location":"changelog/#v079","text":"Added gee-integration tool to order General improvements","title":"v0.7.9"},{"location":"changelog/#v078","text":"Added support for multipolygon search and clip. Added coregistration and format tools to order Removed persistent version print Overall cleanup and general Improvements","title":"v0.7.8"},{"location":"changelog/#v077","text":"Removed dependency on pendulum and general cleanup.","title":"v0.7.7"},{"location":"changelog/#v076","text":"Now use multiple assets with the idlist tool pass assets as analytic_sr,udm2 for example to get items with both these assets. Updated readme.","title":"v0.7.6"},{"location":"changelog/#v075","text":"Fixed pipwin python path for installer. idlist tool now only returns standard and excludes beta and test quality.","title":"v0.7.5"},{"location":"changelog/#v074","text":"added smart check on partially completed order for reordering. completed orders can be reordered as well","title":"v0.7.4"},{"location":"changelog/#v073","text":"Now constantly checks for updated version incase your porder version is not updated. Added a reorder tool for users to reorder an exiting order or failed order.","title":"v0.7.3"},{"location":"changelog/#v071","text":"ID check tool now works with/without geometry, pass an idlist, and item and asset type to check. Order size tool is optimized for speed. pipwin tool uploaded to v0.5.0 to handle windows packages. Overall general improvements.","title":"v0.7.1"},{"location":"changelog/#v070","text":"Now estimates total download size before downloading. Fixed issue with downloading single archive zip files.","title":"v0.7.0"},{"location":"changelog/#v069","text":"Updated readme to do bulk conversion from Shapefile and KML to geojson. Fixed issues with bundles read and update.","title":"v0.6.9"},{"location":"changelog/#v068","text":"Fixed issues with direct usage of kml to get idlist. Combined convert tool to convert folders with shapefiles and kml to geojsons.","title":"v0.6.8"},{"location":"changelog/#v066-v067","text":"Fixed downloader for pipwin for release >= 0.4.8 Improved overall package installation for windows Check pipwin import version to get release 0.4.9","title":"v0.6.6-v0.6.7"},{"location":"changelog/#v065","text":"Added bundles check function to get latest bundles from developers page .","title":"v0.6.5"},{"location":"changelog/#v064","text":"Pull request fixed issue with pipwin installation.","title":"v0.6.4"},{"location":"changelog/#v062","text":"Fixed issue with werkzeug and pipwin implementation. Changed default overlap to 0.01 Fixed issue with YAML loader implementation. General improvements.","title":"v0.6.2"},{"location":"changelog/#v061","text":"Added cancel order and bulk cancel orders tools","title":"v0.6.1"},{"location":"changelog/#v060","text":"Fixed base64 encoding for GCS credentials for python 3. Re-release of python 3 only supported version. Use upto version 0.5.7 only for Python 2.","title":"v0.6.0"},{"location":"changelog/#v059","text":"No more deperecation or future warnings from pyproj Issue 40 porder search is faster Python 2.7 will reach the end of its life on January 1 st , 2020. No more python 2 support from v0.5.9","title":"v0.5.9"},{"location":"changelog/#v058","text":"Handles python version while installing pipwin Now open readme page in browser using porder readme","title":"v0.5.8"},{"location":"changelog/#v057","text":"Fixed arg readout if no argument is passed to CLI. Issue 39 . Updated requirements to include DateTimeRange Fixed issue with GDAL~=3 requirement for fiona 1.8.11 release","title":"v0.5.7"},{"location":"changelog/#v056","text":"Merged pull request 38 to allow for nested delivery of zip files to cloud storage. Added an order state list tool.","title":"v0.5.6"},{"location":"changelog/#v055","text":"Better file check for skipping download requests. Improvements to multiprocessing and async downloader. General improvements to stability and performance.","title":"v0.5.5"},{"location":"changelog/#v054","text":"Updated bundles.json. Merged pull request to update bundles .","title":"v0.5.4"},{"location":"changelog/#v053","text":"Updated order status. Check existing files before attempting redirect url and download. Overall optimization for faster check and updated readme for fallback bundles.","title":"v0.5.3"},{"location":"changelog/#v052","text":"Added harmonization tool to harmonize PS2.SD to PS2. Improvements and error handling to quota tool Merged pull request 35 to keep download progress via enumerate.","title":"v0.5.2"},{"location":"changelog/#v051","text":"Added utf-8 encoding for shapefile to geojson conversion Merged pull request 34 to refresh url once expired.","title":"v0.5.1"},{"location":"changelog/#v049","text":"Fixed issue with gdal import for pipwin windows. Fixed import issue with stats endpoint.","title":"v0.4.9"},{"location":"changelog/#v048","text":"Replaced concurrency check with stats endpoint to get queued and running orders. Change pipwin cache refresh time to two weeks.","title":"v0.4.8"},{"location":"changelog/#v047","text":"Fixed issue with queuing state for orders and downloads.","title":"v0.4.7"},{"location":"changelog/#v046","text":"Handles refreshing pipwin cache and better error handling Fixed issue with downloading unique manifest ID for zip files. Updated ReadMe with improved documentation.","title":"v0.4.6"},{"location":"changelog/#v045","text":"Handles installation of windows specific libraries using pipwin . General improvements","title":"v0.4.5"},{"location":"changelog/#v044","text":"Manifest files for each asset is now written in format ItemID_manifest.json to avoid skipping manifest.json common file name. Simple and multipart downloader now show number of items remaining during the download. General improvements, bundles tool now prints Bundles:Name followed by assets included in the bundle","title":"v0.4.4"},{"location":"changelog/#v043","text":"Fixed issues with setup.py and pyproj version. Improved ReadMe instructions.","title":"v0.4.3"},{"location":"changelog/#v042","text":"Added geometry check functionality to multipolygon with shapely self intersection Issue 30 . For multipolygons this also performs a vertex count check and simplifies polygon to fit under 500 vertices. General improvements","title":"v0.4.2"},{"location":"changelog/#v041","text":"Fixed issue with shapely self intersection using buffer(0). General improvements","title":"v0.4.1"},{"location":"changelog/#v040","text":"Fixed issue with placing reprojection request. Downloader can now download partial as well as completely successful orders. Added retry method for rate limit during downloading General improvements","title":"v0.4.0"},{"location":"changelog/#v039","text":"Removed deprecated bundles from bundles list. Improved parameter description","title":"v0.3.9"},{"location":"changelog/#v037","text":"Added capability to pass subscription id when submitting order.","title":"v0.3.7"},{"location":"changelog/#v036","text":"Replaced asset in order tool with bundles. Created a new bundles tool to generate bundle list for an item type Improvements to the idlist tool now prints output as it makes progress.","title":"v0.3.6"},{"location":"changelog/#v035","text":"Better integration for quota tool Updates information while waiting for idlist Updated requirements","title":"v0.3.5"},{"location":"changelog/#v034","text":"Added async downloader for python 3.4 Checks for existing files before spawning processes Better handling of multiprocessing output Added a quick version tool","title":"v0.3.4"},{"location":"changelog/#v033","text":"Fixed issue with order name when no ops are used. Used file basename for splitting the idlist.","title":"v0.3.3"},{"location":"changelog/#v032","text":"idlist tool can no use a multipolygon and iteratively look for scenes Orders clip tool can now handle multipolygon clip Added new tool zipall to handle single archive download in format ordername_date.zip","title":"v0.3.2"},{"location":"changelog/#v031","text":"Can now support an additional string and range filter Check total area and clip area estimates from any idlist using idcheck. General improvements to the tool.","title":"v0.3.1"},{"location":"changelog/#v030","text":"Enhances idlist to execute faster search and return using Planet CLI Included better error handling while placing order.","title":"v0.3.0"},{"location":"changelog/#v028","text":"Added tool to convert folder with shapefiles to GeoJSONs","title":"v0.2.8"},{"location":"changelog/#v027","text":"Improved overlap calculations for larger geometries Added a geometry simplification tool to reduce number of vertices","title":"v0.2.7"},{"location":"changelog/#v026","text":"Skysat area are calculated using EPSG:3857 to resolve metadata EPSG issue General improvements","title":"v0.2.6"},{"location":"changelog/#v025","text":"Fixed issue with area calculation estimates General improvements","title":"v0.2.5"},{"location":"changelog/#v024","text":"Now functions without limit on the number of assets in the idlist Parses possible asset types if only item type is supplied for idlist","title":"v0.2.4"},{"location":"changelog/#v023","text":"Now estimates area before and after clip when you run idlist General improvements","title":"v0.2.3"},{"location":"changelog/#v021","text":"Now exports only csv idlist Fixed count with concurrency check","title":"v0.2.1"},{"location":"changelog/#v020","text":"Fixed pysmartdl install issues Added concurrent orders check version and os resolve for shapely","title":"v0.2.0"},{"location":"changelog/#v019","text":"Added msavi Fixed issues with GeoJSON read","title":"v0.1.9"},{"location":"changelog/#v018","text":"Fixed issues with empty JSON append General improvements to the tool","title":"v0.1.8"},{"location":"changelog/#v017","text":"Added band math indices for PlanetScope item Fixed issues with retry for downloader General improvements to the tool","title":"v0.1.7"},{"location":"changelog/#v016","text":"Made fixes to have python 3.X compatability","title":"v0.1.6"},{"location":"changelog/#v015","text":"General improvements and bug fixes","title":"v0.1.5"},{"location":"changelog/#v014","text":"Fixed issue with Python 3 CSV write compatability Fixed issues with Shapely instance issue","title":"v0.1.4"},{"location":"changelog/#v013","text":"Fixed issue with clipboard access in headless setup","title":"v0.1.3"},{"location":"changelog/#v012","text":"Fixed issue and extension for multiprocessing downloader Overall general improvements to the tool","title":"v0.1.2"},{"location":"changelog/#v010","text":"Fixed issue and improved idlist and sort Fixed issue with clip tool Overall general improvements to the tool","title":"v0.1.0"},{"location":"changelog/#v008","text":"Improvements to operations in order tool Now supports export to gcs/azure/aws along with kernel, projection and compression base64 encoding tool for encoding gcs credentials Overall general improvements to the tool","title":"v0.0.8"},{"location":"changelog/#v007","text":"Now allows for all downloads or download using extension Polling for order to complete and automatically download General improvements","title":"v0.0.7"},{"location":"changelog/#v006","text":"Merged contribution by David Shean Fixed issues with op equals None Fixed issues with relative import Improved Py3 compatability General improvements","title":"v0.0.6"},{"location":"changelog/#v005","text":"Added exponential backoff for pydl Fixed issues with dependency General overall improvements","title":"v0.0.5"},{"location":"changelog/#v004","text":"Created strict geoinstersection to avoid orders to fail Improvements to overlap function General overall improvements","title":"v0.0.4"},{"location":"changelog/#v003","text":"Added overlap function to idlist Added multiprocessing downloader with rate limit and extension filter General overall improvements","title":"v0.0.3"},{"location":"changelog/#v002","text":"Fixed issues with import modules","title":"v0.0.2"},{"location":"installation/","text":"General Installation \u00b6 Once you have shapely and the other libraries configured, to install porder: Simple CLI for Planet ordersv2 API you can install using two methods pip install porder For linux I found it helps to specify the pip type and use --user pip install porder --user or pip3 install porder --user or you can also try git clone https://github.com/samapriya/porder.git cd porder python setup.py install","title":"General Installation"},{"location":"installation/#general-installation","text":"Once you have shapely and the other libraries configured, to install porder: Simple CLI for Planet ordersv2 API you can install using two methods pip install porder For linux I found it helps to specify the pip type and use --user pip install porder --user or pip3 install porder --user or you can also try git clone https://github.com/samapriya/porder.git cd porder python setup.py install","title":"General Installation"},{"location":"license/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and \u00a9 You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"{}\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright {2019} {Samapriya Roy} Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"prerequisites/","text":"Prerequisites \u00b6 This assumes that you have native python & pip installed in your system, you can test this by going to the terminal (or windows command prompt) and trying. I recommend installation within virtual environment if you are worries about messing up your current environment. python and then pip list If you get no errors and you have python 2.7.14 or higher you should be good to go. This command line tool is dependent on shapely and fiona and as such uses functionality from GDAL For installing GDAL in Ubuntu sudo add-apt-repository ppa:ubuntugis/ppa && sudo apt-get update sudo apt-get install gdal-bin sudo apt-get install python-gdal For Windows I found this guide from UCLA Also for Ubuntu Linux I saw that this is necessary before the install sudo apt install libcurl4-openssl-dev libssl-dev","title":"Prerequisites"},{"location":"prerequisites/#prerequisites","text":"This assumes that you have native python & pip installed in your system, you can test this by going to the terminal (or windows command prompt) and trying. I recommend installation within virtual environment if you are worries about messing up your current environment. python and then pip list If you get no errors and you have python 2.7.14 or higher you should be good to go. This command line tool is dependent on shapely and fiona and as such uses functionality from GDAL For installing GDAL in Ubuntu sudo add-apt-repository ppa:ubuntugis/ppa && sudo apt-get update sudo apt-get install gdal-bin sudo apt-get install python-gdal For Windows I found this guide from UCLA Also for Ubuntu Linux I saw that this is necessary before the install sudo apt install libcurl4-openssl-dev libssl-dev","title":"Prerequisites"},{"location":"projects/autoinstall/","text":"Auto Install using porder \u00b6 Starting from porder v0.4.5 onwards: Simply run porder -h after installation. This should go fetch the extra libraries you need and install them. Once installation is complete, the porder help page will show up.","title":"Auto Install using porder"},{"location":"projects/autoinstall/#auto-install-using-porder","text":"Starting from porder v0.4.5 onwards: Simply run porder -h after installation. This should go fetch the extra libraries you need and install them. Once installation is complete, the porder help page will show up.","title":"Auto Install using porder"},{"location":"projects/bandmath/","text":"Band Math on Clipped Images \u00b6 These are the steps needed to clip images to a given geometry file. Create or convert your geometry into a geojson file, using geojson.io Use porder idlist tool to get the idlist file that intersects your geometry. Place your order with clipping including as an operation and the geometry included as a the boundary file notice the --boundary argument passed while placing the order. Bandmath is passed as operations here we pass ndvi ndwi evi2 after the clipping operation in the same order setup. Read about available indices here . Pass index names in lowercase ndvi ndwi evi2 sr tvi and you can pass a maximum of 5 indices at a time. Your capability to perform this operation is based on your overall permission The order setup will look like the following","title":"Band Math on Clipped Images"},{"location":"projects/bandmath/#band-math-on-clipped-images","text":"These are the steps needed to clip images to a given geometry file. Create or convert your geometry into a geojson file, using geojson.io Use porder idlist tool to get the idlist file that intersects your geometry. Place your order with clipping including as an operation and the geometry included as a the boundary file notice the --boundary argument passed while placing the order. Bandmath is passed as operations here we pass ndvi ndwi evi2 after the clipping operation in the same order setup. Read about available indices here . Pass index names in lowercase ndvi ndwi evi2 sr tvi and you can pass a maximum of 5 indices at a time. Your capability to perform this operation is based on your overall permission The order setup will look like the following","title":"Band Math on Clipped Images"},{"location":"projects/base64/","text":"base46 encoding \u00b6 This does exactly as it sounds, it encodes your credential files to base64 for use with gcs.","title":"base46 encoding"},{"location":"projects/base64/#base46-encoding","text":"This does exactly as it sounds, it encodes your credential files to base64 for use with gcs.","title":"base46 encoding"},{"location":"projects/bundle/","text":"Get your bundle type \u00b6 Ordering using ordersv2 uses the concept of bundles. A bundle is a combination of multiple assets for an item that come together and are delivered as part of the overall fulfillment of the order. For example an analytic asset for PSScene4Band is a single tif file, however the analytic bundle for PSScene4Band includes analytic tiff file, the analytic_xml metadata and the udm data mask file as part of the bundle. You can find more information about bundles here . Thus the concept of bundles bring together single function to order and download multiple related assets. Since the list of bundles is long, this tool simply allows you to get every bundle type based on item type. The setup is simple A simple setup would be porder bundles --item \"PSScene4Band\"","title":"Get your bundle type"},{"location":"projects/bundle/#get-your-bundle-type","text":"Ordering using ordersv2 uses the concept of bundles. A bundle is a combination of multiple assets for an item that come together and are delivered as part of the overall fulfillment of the order. For example an analytic asset for PSScene4Band is a single tif file, however the analytic bundle for PSScene4Band includes analytic tiff file, the analytic_xml metadata and the udm data mask file as part of the bundle. You can find more information about bundles here . Thus the concept of bundles bring together single function to order and download multiple related assets. Since the list of bundles is long, this tool simply allows you to get every bundle type based on item type. The setup is simple A simple setup would be porder bundles --item \"PSScene4Band\"","title":"Get your bundle type"},{"location":"projects/cancel/","text":"Cancel order or orders \u00b6 You can cancel a queued order or cancel all queued orders, before the status changes to running. Simply put you can cancel a specific order before it starts running or cancel all of your queued orders.","title":"Cancel order or orders"},{"location":"projects/cancel/#cancel-order-or-orders","text":"You can cancel a queued order or cancel all queued orders, before the status changes to running. Simply put you can cancel a specific order before it starts running or cancel all of your queued orders.","title":"Cancel order or orders"},{"location":"projects/clipping/","text":"Clipping images \u00b6 These are the steps needed to clip images to a given geometry file. Create or convert your geometry into a geojson file, using geojson.io Use porder idlist tool to get the idlist file that intersects your geometry. Place your order with clipping including as an operation and the geometry included as a the boundary file notice the --boundary argument passed while placing the order. The order setup will look like the following","title":"Clipping images"},{"location":"projects/clipping/#clipping-images","text":"These are the steps needed to clip images to a given geometry file. Create or convert your geometry into a geojson file, using geojson.io Use porder idlist tool to get the idlist file that intersects your geometry. Place your order with clipping including as an operation and the geometry included as a the boundary file notice the --boundary argument passed while placing the order. The order setup will look like the following","title":"Clipping images"},{"location":"projects/convert2geojson/","text":"Convert to GeoJSON \u00b6 This tool allows you to convert from a folder with multiple shapefiles or kml files to a folder with geojson that can then be used with the tool. It makes use of geopandas and reprojects your shapefile to make it compatible while passing onto the API for search and download.","title":"Convert to GeoJSON"},{"location":"projects/convert2geojson/#convert-to-geojson","text":"This tool allows you to convert from a folder with multiple shapefiles or kml files to a folder with geojson that can then be used with the tool. It makes use of geopandas and reprojects your shapefile to make it compatible while passing onto the API for search and download.","title":"Convert to GeoJSON"},{"location":"projects/download/","text":"Simple Downloader \u00b6 The allows you to download the files in your order, to a local folder. It uses the order url generated using the orders tool to access and download the files.","title":"Simple Downloader"},{"location":"projects/download/#simple-downloader","text":"The allows you to download the files in your order, to a local folder. It uses the order url generated using the orders tool to access and download the files.","title":"Simple Downloader"},{"location":"projects/gee/","text":"These are the steps needed to deliver your images to Google Earth Engine . Make sure you setup your GEE & planet account first based on these instructions and create or convert your geometry into a geojson file, using geojson.io Use porder idlist tool to get the idlist file that intersects your geometry. Place your order with gee included as an operation and the google-cloud-project,collection-name included for the --gee argument passed while placing the order. Your capability to perform this operation is based on your overall permission and if you followed the setup mentioned in steps 1. The order setup will look like the following","title":"GEE Delivery"},{"location":"projects/idlist/","text":"Getting an idlist \u00b6 Create an idlist for your geometry based on some basic filters,including geometry, start and end date and cloud cover. If no cloud cover is specified everything form 0 to 100% cloud cover is included. For now the tool can handle geojson,json and kml files. The output is a csv file with ids. The tool also allows you to make sure you get percentage overlap, when selecting image, for clip operations adjust it accordingly (usally --ovp 1 for orders not to fail during clip). The tool now also prints estimated area in Square kilometes for the download and estimated area if you clipped your area with the geometry you are searching (just estimates). I have changed the setup to now do the following two things The number option is optional, so it can look for all images in the time range, but be careful if the area is too large, use at own risk . A better option is to supply the number. It is possible to often forget about the different asset types, so you can now not pass an item and the script will return every possible type of asset for each item type depending on the bundle. A simple setup would be To run an experiment to add additional filter, you can now pass an additional string or range filter or both flag for string and range filters, a setup would be. The additional filters are optional porder idlist --input \"Path to geojson file\" --start \"YYYY-MM-DD\" --end \"YYYY-MM-DD\" --item \"PSScene4Band\" --asset \"analytic\" --outfile \"Path to idlist.csv\" --filters range:clear_percent:55:100 --number 20 porder idlist --input \"Path to geojson file\" --start \"YYYY-MM-DD\" --end \"YYYY-MM-DD\" --item \"PSScene4Band\" --asset \"analytic\" --outfile \"Path to idlist.csv\" --filters string:satellite_id:\"1003,1006,1012,1020,1038\" --number 20 porder idlist --input \"Path to geojson file\" --start \"YYYY-MM-DD\" --end \"YYYY-MM-DD\" --item \"PSScene4Band\" --asset \"analytic\" --outfile \"Path to idlist.csv\" --filters string:satellite_id:\"1003,1006,1012,1020,1038\" range:clear_percent:55:100 --number 20 The search tool now allows the user to pass Hours , Minutes and seconds and utilizes the local timezone on the users computer to search. This including the format HH:MM:SS seperated from yyyy-mm-dd by T. An example would be the following, while noting that passing time is purely optional and you can still search by simply passing YYYY-MM-DD. porder idlist --input \"Path to geojson file\" --start \"yyyy-mm-ddTHH:MM:SS\" --end \"yyyy-mm-ddTHH:MM:SS\" --item \"PSScene4Band\" --asset \"analytic\" --outfile \"Path to idlist.csv\" --filters range:clear_percent:55:100 --number 20 porder idlist --input \"Path to geojson file\" --start \"2021-01-01T14:12:10\" --end \"2021-03-01T16:20:20\" --item \"PSScene4Band\" --asset \"analytic\" --outfile \"Path to idlist.csv\" --number 20 The idlist tool can now use a multipolygon and iteratively look for scenes.","title":"Getting an idlist"},{"location":"projects/idlist/#getting-an-idlist","text":"Create an idlist for your geometry based on some basic filters,including geometry, start and end date and cloud cover. If no cloud cover is specified everything form 0 to 100% cloud cover is included. For now the tool can handle geojson,json and kml files. The output is a csv file with ids. The tool also allows you to make sure you get percentage overlap, when selecting image, for clip operations adjust it accordingly (usally --ovp 1 for orders not to fail during clip). The tool now also prints estimated area in Square kilometes for the download and estimated area if you clipped your area with the geometry you are searching (just estimates). I have changed the setup to now do the following two things The number option is optional, so it can look for all images in the time range, but be careful if the area is too large, use at own risk . A better option is to supply the number. It is possible to often forget about the different asset types, so you can now not pass an item and the script will return every possible type of asset for each item type depending on the bundle. A simple setup would be To run an experiment to add additional filter, you can now pass an additional string or range filter or both flag for string and range filters, a setup would be. The additional filters are optional porder idlist --input \"Path to geojson file\" --start \"YYYY-MM-DD\" --end \"YYYY-MM-DD\" --item \"PSScene4Band\" --asset \"analytic\" --outfile \"Path to idlist.csv\" --filters range:clear_percent:55:100 --number 20 porder idlist --input \"Path to geojson file\" --start \"YYYY-MM-DD\" --end \"YYYY-MM-DD\" --item \"PSScene4Band\" --asset \"analytic\" --outfile \"Path to idlist.csv\" --filters string:satellite_id:\"1003,1006,1012,1020,1038\" --number 20 porder idlist --input \"Path to geojson file\" --start \"YYYY-MM-DD\" --end \"YYYY-MM-DD\" --item \"PSScene4Band\" --asset \"analytic\" --outfile \"Path to idlist.csv\" --filters string:satellite_id:\"1003,1006,1012,1020,1038\" range:clear_percent:55:100 --number 20 The search tool now allows the user to pass Hours , Minutes and seconds and utilizes the local timezone on the users computer to search. This including the format HH:MM:SS seperated from yyyy-mm-dd by T. An example would be the following, while noting that passing time is purely optional and you can still search by simply passing YYYY-MM-DD. porder idlist --input \"Path to geojson file\" --start \"yyyy-mm-ddTHH:MM:SS\" --end \"yyyy-mm-ddTHH:MM:SS\" --item \"PSScene4Band\" --asset \"analytic\" --outfile \"Path to idlist.csv\" --filters range:clear_percent:55:100 --number 20 porder idlist --input \"Path to geojson file\" --start \"2021-01-01T14:12:10\" --end \"2021-03-01T16:20:20\" --item \"PSScene4Band\" --asset \"analytic\" --outfile \"Path to idlist.csv\" --number 20 The idlist tool can now use a multipolygon and iteratively look for scenes.","title":"Getting an idlist"},{"location":"projects/idsplit/","text":"Split a long idlist \u00b6 This allows you to split your idlist into small csv files incase you wanted to created batches of orders. A simple setup would be","title":"Split a long idlist"},{"location":"projects/idsplit/#split-a-long-idlist","text":"This allows you to split your idlist into small csv files incase you wanted to created batches of orders. A simple setup would be","title":"Split a long idlist"},{"location":"projects/multipart/","text":"Multipart Downloader \u00b6 The allows you to multipart download the files in your order, this uses a multiprocessing downloader to quickly download your files to a local folder. It uses the order url generated using the orders tool to access and download the files.","title":"Multipart Downloader"},{"location":"projects/multipart/#multipart-downloader","text":"The allows you to multipart download the files in your order, this uses a multiprocessing downloader to quickly download your files to a local folder. It uses the order url generated using the orders tool to access and download the files.","title":"Multipart Downloader"},{"location":"projects/multiprocessing/","text":"Multiprocessing or Async Downloading \u00b6 The uses the multiprocessing library to quickly download your files to a local folder. It uses the order url generated using the orders tool to access and download the files and includes an expotential rate limiting function to handle too many requests. To save on time it uses an extension filter so for example if you are using the zip operation you can use \".zip\" and if you are downloading only images, udm and xml you can use \".tif\" or \".xml\" accordingly. For python 3.4 or higher, this switches to using an true async downloader instead of using multiprocessing.","title":"Multiprocessing or Async Downloading"},{"location":"projects/multiprocessing/#multiprocessing-or-async-downloading","text":"The uses the multiprocessing library to quickly download your files to a local folder. It uses the order url generated using the orders tool to access and download the files and includes an expotential rate limiting function to handle too many requests. To save on time it uses an extension filter so for example if you are using the zip operation you can use \".zip\" and if you are downloading only images, udm and xml you can use \".tif\" or \".xml\" accordingly. For python 3.4 or higher, this switches to using an true async downloader instead of using multiprocessing.","title":"Multiprocessing or Async Downloading"},{"location":"projects/order/","text":"Place an order \u00b6 This tool allows you to actually place the order using the idlist that you created earlier. the --op argument allows you to take operations, delivery and notifications in a sequence for example --op toar clip email performs Top of Atmospheric reflectance, followed by clipping to your geometry and send you an email notification once the order has completed, failed or had any any change of status. An important changes is the concept of passing bundles instead of using assets. Bundles are predefined meaning all assets in a bundle are not available for an item your attempt at downloading that attempt will fail. For example if an item id '20181227_125554_0f4c' does not have surface reflectance asset type. So if you try to download this using bundle type analytic_sr_udm2 it will not work, similary if you order an item where a specific operation cannot be performed for example if you order visual and then try to do bandmath with four bands. These examples and more are where fallback bundles come in handy. Think of this as providing a list of bundles to keep trying if one bundle type fails. The priority goes left to right. You can provide comma seperated fallback bundles for example as analytic_sr_udm2,analytic instead of analytic_sr_udm2 to avoid certain items from failing to download. The list of operations for the --op are below and the order of these operations is important op description clip Clip imagery can handle single and multi polygon verify or create geojson.io toar Top of Atmosphere Reflectance imagery generated for imagery harmonize Harmonize Dove R (instrument type PS2.SD) data to classic dove (instrument type PS) composite Composite number of images in a given order zip Zip bundles together and creates downloads (each asset has a single bundle so multiple zip files) zipall Create a single zip file containing all assets compression Use image compression projection Reproject before downloaing image aws Option called to specify delivery to AWS azure Option called to specify delivery to AZURE gcs Option called to specify delivery to GCS email Email notification to your planet registered email anchor Anchor image id for coregistration format Delivery format choose from COG/PL_NITF to use for the format tool gee provide gee-project,gee-collection You can now add some predefined indices for PlanetScope 4 band items with a maximum of 5 indices for a single setup . This is experimental. The list of indices include Index Source Simple ratio (SR) Jordan 1969 Normalized Difference Vegetation Index (NDVI) Rouse et al 1973 Green Normalized Difference Index (GNDVI) Gitelson et al 1996 Blue Normalized Difference Vegetation Index (BNDVI) Wang et al 2007 Transformed Vegetation Index (TVI) Broge and Leblanc 2000 Optimized Soil Adjusted Vegetation Index (OSAVI) Rondeaux et al 1996 Enhanced Vegetation Index (EVI2) Jian et al 2008 Normalized Difference Water Index (NDWI) McFeeters 1996 Modified Soil-adjusted Vegetation Index v2 (MSAVI2) Qi 1994 Operations setup \u00b6","title":"Place an order"},{"location":"projects/order/#place-an-order","text":"This tool allows you to actually place the order using the idlist that you created earlier. the --op argument allows you to take operations, delivery and notifications in a sequence for example --op toar clip email performs Top of Atmospheric reflectance, followed by clipping to your geometry and send you an email notification once the order has completed, failed or had any any change of status. An important changes is the concept of passing bundles instead of using assets. Bundles are predefined meaning all assets in a bundle are not available for an item your attempt at downloading that attempt will fail. For example if an item id '20181227_125554_0f4c' does not have surface reflectance asset type. So if you try to download this using bundle type analytic_sr_udm2 it will not work, similary if you order an item where a specific operation cannot be performed for example if you order visual and then try to do bandmath with four bands. These examples and more are where fallback bundles come in handy. Think of this as providing a list of bundles to keep trying if one bundle type fails. The priority goes left to right. You can provide comma seperated fallback bundles for example as analytic_sr_udm2,analytic instead of analytic_sr_udm2 to avoid certain items from failing to download. The list of operations for the --op are below and the order of these operations is important op description clip Clip imagery can handle single and multi polygon verify or create geojson.io toar Top of Atmosphere Reflectance imagery generated for imagery harmonize Harmonize Dove R (instrument type PS2.SD) data to classic dove (instrument type PS) composite Composite number of images in a given order zip Zip bundles together and creates downloads (each asset has a single bundle so multiple zip files) zipall Create a single zip file containing all assets compression Use image compression projection Reproject before downloaing image aws Option called to specify delivery to AWS azure Option called to specify delivery to AZURE gcs Option called to specify delivery to GCS email Email notification to your planet registered email anchor Anchor image id for coregistration format Delivery format choose from COG/PL_NITF to use for the format tool gee provide gee-project,gee-collection You can now add some predefined indices for PlanetScope 4 band items with a maximum of 5 indices for a single setup . This is experimental. The list of indices include Index Source Simple ratio (SR) Jordan 1969 Normalized Difference Vegetation Index (NDVI) Rouse et al 1973 Green Normalized Difference Index (GNDVI) Gitelson et al 1996 Blue Normalized Difference Vegetation Index (BNDVI) Wang et al 2007 Transformed Vegetation Index (TVI) Broge and Leblanc 2000 Optimized Soil Adjusted Vegetation Index (OSAVI) Rondeaux et al 1996 Enhanced Vegetation Index (EVI2) Jian et al 2008 Normalized Difference Water Index (NDWI) McFeeters 1996 Modified Soil-adjusted Vegetation Index v2 (MSAVI2) Qi 1994","title":"Place an order"},{"location":"projects/order/#operations-setup","text":"","title":"Operations setup"},{"location":"projects/ordersize/","text":"Order Size \u00b6 The tool now allows you to estimate the total download size for a specific order.","title":"Order size"},{"location":"projects/ordersize/#order-size","text":"The tool now allows you to estimate the total download size for a specific order.","title":"Order Size"},{"location":"projects/orderstats/","text":"Order stats \u00b6 The tool allows you to check on number of running and queued orders for both organization and user level. Using this is simple porder stats","title":"Order stats"},{"location":"projects/orderstats/#order-stats","text":"The tool allows you to check on number of running and queued orders for both organization and user level. Using this is simple porder stats","title":"Order stats"},{"location":"projects/package-install/","text":"Package installation \u00b6 For windows first thing you need to figure out is your Python version and whether it is 32 bit or 64 bit. You can do this by going to your command prompt and typing python. For my windows machine, I have both 32-bit python 2.7.16 and 64-bit Python 3.6.6. You can get the python version at the beginning of the highlighted lines and the 32 or 64 bit within the Intel or AMD64 within the square brackets. Your default python is the one you get by just typing python in the command line. Then download the following packages based on the information we collect about our python type in the earlier step. We use unofficial binaries to install these. This step is only needed if you are on a windows machine if you are using a setup manager like anaconda you might be able to avoid this setup completely At this stage if you were unable to install gdal then download the gdal binaries first , install that before everything else gdal: https://www.lfd.uci.edu/~gohlke/pythonlibs/#gdal Then follow along the following libraries pyproj: https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyproj shapely: https://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely fiona: https://www.lfd.uci.edu/~gohlke/pythonlibs/#fiona geopandas: https://www.lfd.uci.edu/~gohlke/pythonlibs/#geopandas To choose the version that is correct for you use the python information you collected earlier For example for my python 3.6.6 and AMD 64 if I was installing shapely I would choose the following, here 36 means python 3.6 and amd64 refers to the 64bit we were talking about. Shapely\u20111.6.4.post2\u2011cp36\u2011cp36m\u2011win_amd64.whl You will get a wheel file or a file ending with .whl. You can now simply browse to the folder or migrate to it in your command prompt. Once there if I am installing for my python 3.6 the command was. At this point we will make use of our trusted package installer that comes with python called pip. Note the choice of pip or pip3 depends on your python version usually you can get the pip to use with your python by typing pip3 -V you get a readout like this pip 18.1 from c:\\python3\\lib\\site-packages\\pip (python 3.6) if you have pip just replace that with pip -V Then simply install the wheel files you downloaded using the following setup pip3 install full path to Shapely\u20111.6.4.post2\u2011cp36\u2011cp36m\u2011win_amd64.whl in my case that would be pip3 install \"C:\\Users\\samapriya\\Downloads\\Shapely\u20111.6.4.post2\u2011cp36\u2011cp36m\u2011win_amd64.whl\" Or you can use anaconda to install . Again, both of these options are mentioned on Shapely\u2019s Official PyPI page .","title":"Package installation"},{"location":"projects/package-install/#package-installation","text":"For windows first thing you need to figure out is your Python version and whether it is 32 bit or 64 bit. You can do this by going to your command prompt and typing python. For my windows machine, I have both 32-bit python 2.7.16 and 64-bit Python 3.6.6. You can get the python version at the beginning of the highlighted lines and the 32 or 64 bit within the Intel or AMD64 within the square brackets. Your default python is the one you get by just typing python in the command line. Then download the following packages based on the information we collect about our python type in the earlier step. We use unofficial binaries to install these. This step is only needed if you are on a windows machine if you are using a setup manager like anaconda you might be able to avoid this setup completely At this stage if you were unable to install gdal then download the gdal binaries first , install that before everything else gdal: https://www.lfd.uci.edu/~gohlke/pythonlibs/#gdal Then follow along the following libraries pyproj: https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyproj shapely: https://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely fiona: https://www.lfd.uci.edu/~gohlke/pythonlibs/#fiona geopandas: https://www.lfd.uci.edu/~gohlke/pythonlibs/#geopandas To choose the version that is correct for you use the python information you collected earlier For example for my python 3.6.6 and AMD 64 if I was installing shapely I would choose the following, here 36 means python 3.6 and amd64 refers to the 64bit we were talking about. Shapely\u20111.6.4.post2\u2011cp36\u2011cp36m\u2011win_amd64.whl You will get a wheel file or a file ending with .whl. You can now simply browse to the folder or migrate to it in your command prompt. Once there if I am installing for my python 3.6 the command was. At this point we will make use of our trusted package installer that comes with python called pip. Note the choice of pip or pip3 depends on your python version usually you can get the pip to use with your python by typing pip3 -V you get a readout like this pip 18.1 from c:\\python3\\lib\\site-packages\\pip (python 3.6) if you have pip just replace that with pip -V Then simply install the wheel files you downloaded using the following setup pip3 install full path to Shapely\u20111.6.4.post2\u2011cp36\u2011cp36m\u2011win_amd64.whl in my case that would be pip3 install \"C:\\Users\\samapriya\\Downloads\\Shapely\u20111.6.4.post2\u2011cp36\u2011cp36m\u2011win_amd64.whl\" Or you can use anaconda to install . Again, both of these options are mentioned on Shapely\u2019s Official PyPI page .","title":"Package installation"},{"location":"projects/pipwin/","text":"Pipwin install \u00b6 If this does not work or you get an unexpected error try the following commands. You can also use these commands if you simply want to update these libraries. pipwin refresh pipwin install gdal pipwin install pyproj pipwin install shapely pipwin install fiona pipwing install geopandas","title":"Pipwin Installation"},{"location":"projects/pipwin/#pipwin-install","text":"If this does not work or you get an unexpected error try the following commands. You can also use these commands if you simply want to update these libraries. pipwin refresh pipwin install gdal pipwin install pyproj pipwin install shapely pipwin install fiona pipwing install geopandas","title":"Pipwin install"},{"location":"projects/quota/","text":"quota tool \u00b6 Just a simple tool to print your planet subscription quota quickly.","title":"Quota tool"},{"location":"projects/quota/#quota-tool","text":"Just a simple tool to print your planet subscription quota quickly.","title":"quota tool"},{"location":"projects/reorder/","text":"Reorder an order \u00b6 This tool allows you to reorder an existing order with the same item ids and tools. This is trying to look into the overall structures of existing orders and maybe useful to reorder if an order fails for example. usage: porder reorder [-h] --url URL [--notification NOTIFICATION] optional arguments: -h, --help show this help message and exit Required named arguments.: --url URL Order url to be ordered Optional named arguments: --notification NOTIFICATION Use \"email\" to get an email notification Operations setup \u00b6","title":"Reorder an order"},{"location":"projects/reorder/#reorder-an-order","text":"This tool allows you to reorder an existing order with the same item ids and tools. This is trying to look into the overall structures of existing orders and maybe useful to reorder if an order fails for example. usage: porder reorder [-h] --url URL [--notification NOTIFICATION] optional arguments: -h, --help show this help message and exit Required named arguments.: --url URL Order url to be ordered Optional named arguments: --notification NOTIFICATION Use \"email\" to get an email notification","title":"Reorder an order"},{"location":"projects/reorder/#operations-setup","text":"","title":"Operations setup"},{"location":"projects/setup/","text":"Setup \u00b6 Shapely and a few other libraries are notoriously difficult to install on windows machines so follow the steps mentioned here before installing porder . You can download and install shapely and other libraries from the Unofficial Wheel files from here download depending on the python version you have. Do this only once you have install GDAL . I would recommend the steps mentioned above to get the GDAL properly installed. However I am including instructions to using a precompiled version of GDAL similar to the other libraries on windows. You can test to see if you have gdal by simply running gdalinfo in your command prompt. If you get a read out and not an error message you are good to go. If you don't have gdal try Option 1,2 or 3 in that order and that will install gdal along with the other libraries","title":"Setup"},{"location":"projects/setup/#setup","text":"Shapely and a few other libraries are notoriously difficult to install on windows machines so follow the steps mentioned here before installing porder . You can download and install shapely and other libraries from the Unofficial Wheel files from here download depending on the python version you have. Do this only once you have install GDAL . I would recommend the steps mentioned above to get the GDAL properly installed. However I am including instructions to using a precompiled version of GDAL similar to the other libraries on windows. You can test to see if you have gdal by simply running gdalinfo in your command prompt. If you get a read out and not an error message you are good to go. If you don't have gdal try Option 1,2 or 3 in that order and that will install gdal along with the other libraries","title":"Setup"},{"location":"projects/simplify/","text":"Simplify geometry \u00b6 This reduces the number of vertices for a multi vertex and complex GeoJSON. Extremely high vertex count (over 500) seem to fail and hence this tool allows you to export a new geojson with reduced vertices. It uses an implementation of the Visvalingam-Wyatt line simplification algorithm. This tool does work with and without Fiona, but Fiona installation is recommended.","title":"Simplify geometry"},{"location":"projects/simplify/#simplify-geometry","text":"This reduces the number of vertices for a multi vertex and complex GeoJSON. Extremely high vertex count (over 500) seem to fail and hence this tool allows you to export a new geojson with reduced vertices. It uses an implementation of the Visvalingam-Wyatt line simplification algorithm. This tool does work with and without Fiona, but Fiona installation is recommended.","title":"Simplify geometry"},{"location":"projects/statecheck/","text":"Order state check \u00b6 This tool allows you to get the list of orders based on the states and based on the start and end dates of orders. For example if you want to find out all orders that failed within the week you can use this tool to check that. usage: porder ostate [-h] [--state STATE] [--start START] [--end END] [--limit LIMIT] optional arguments: -h, --help show this help message and exit --state STATE choose state between queued| running | success | failed | partial --start START start date in format YYYY-MM-DD --end END end date in format YYYY-MM-DD Optional named arguments: --limit LIMIT Limit the maximum table size The setup to check failed orders would be for example the following, You can place a limit on the number of orders to get by using --limit","title":"Order state check"},{"location":"projects/statecheck/#order-state-check","text":"This tool allows you to get the list of orders based on the states and based on the start and end dates of orders. For example if you want to find out all orders that failed within the week you can use this tool to check that. usage: porder ostate [-h] [--state STATE] [--start START] [--end END] [--limit LIMIT] optional arguments: -h, --help show this help message and exit --state STATE choose state between queued| running | success | failed | partial --start START start date in format YYYY-MM-DD --end END end date in format YYYY-MM-DD Optional named arguments: --limit LIMIT Limit the maximum table size The setup to check failed orders would be for example the following, You can place a limit on the number of orders to get by using --limit","title":"Order state check"},{"location":"projects/zip/","text":"Using zip \u00b6 These are the steps needed to clip images to a given geometry file. Create or convert your geometry into a geojson file, using geojson.io Use porder idlist tool to get the idlist file that intersects your geometry. Place your order with clipping including as an operation and the geometry included as a the boundary file notice the --boundary argument passed while placing the order. We pass the argument zip to zip all files for each asset and zipall to zip all files into a single zip file. Use the zipall tool carefully, extremely large single zip files may fail depending on the overall size. The order setup will look like the following","title":"Using zip"},{"location":"projects/zip/#using-zip","text":"These are the steps needed to clip images to a given geometry file. Create or convert your geometry into a geojson file, using geojson.io Use porder idlist tool to get the idlist file that intersects your geometry. Place your order with clipping including as an operation and the geometry included as a the boundary file notice the --boundary argument passed while placing the order. We pass the argument zip to zip all files for each asset and zipall to zip all files into a single zip file. Use the zipall tool carefully, extremely large single zip files may fail depending on the overall size. The order setup will look like the following","title":"Using zip"}]}